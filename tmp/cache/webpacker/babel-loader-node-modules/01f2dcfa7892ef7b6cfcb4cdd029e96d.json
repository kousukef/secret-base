{"ast":null,"code":"import consumer from \"./consumer\";\n$(function () {\n  var chatChannel = consumer.subscriptions.create({\n    channel: \"ProductChannel\",\n    product_id: $('#messages').data('product-id')\n  }, {\n    connected: function connected() {// Called when the subscription is ready for use on the server\n    },\n    disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n    },\n    received: function received(data) {\n      // Called when there's incoming data on the websocket for this channel\n      if (data['message_type'] === $('#messages').data('message-type')) {\n        var message = \"<div class=\\\"col-12\\\">\\n                    <div class=\\\"card text-white bg-success mb-3 float-\".concat(data['right_or_left'], \"\\\" style=\\\"max-width: 75%;\\\">\\n                     <div class=\\\"card-header\\\" style='max-height: 3rem;'>\\n                       <img src=\\\"\").concat(data['user_image'], \"\\\" class=\\\"rounded mr-2\\\" alt=\\\"user image\\\">\\n                       <strong class=\\\"mr-auto\\\">\").concat(data['user_name'], \"</strong>\\n                       <small>less than a minute ago</small>\\n                     </div>\\n                     <div class=\\\"card-body\\\">\\n                       <p class=\\\"card-text\\\">\").concat(data['message'], \"</p>\\n                     </div>\\n                    </div>\\n                  </div>\");\n        var messages = document.getElementById('messages');\n        messages.insertAdjacentHTML('beforeend', message);\n      }\n    },\n    speak: function speak(message, message_type) {\n      console.log(message);\n      console.log(message_type);\n      return this.perform('speak', {\n        message: message,\n        message_type: message_type\n      });\n    }\n  }); //message送信\n\n  $(document).on('click', '#message_button', function () {\n    var messageType = $('#messages').data('message-type');\n    var messageVal = $('#message_field').val();\n    chatChannel.speak(messageVal, messageType);\n    document.getElementById('message_field').value = '';\n    $('#message_field').focus();\n  });\n});","map":{"version":3,"sources":["/home/ubuntu/environment/secret_base/app/javascript/channels/product_channel.js"],"names":["consumer","$","chatChannel","subscriptions","create","channel","product_id","data","connected","disconnected","received","message","messages","document","getElementById","insertAdjacentHTML","speak","message_type","console","log","perform","on","messageType","messageVal","val","value","focus"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEAC,CAAC,CAAC,YAAW;AACb,MAAMC,WAAW,GAAGF,QAAQ,CAACG,aAAT,CAAuBC,MAAvB,CAA8B;AAC9CC,IAAAA,OAAO,EAAE,gBADqC;AAE9CC,IAAAA,UAAU,EAAEL,CAAC,CAAC,WAAD,CAAD,CAAeM,IAAf,CAAoB,YAApB;AAFkC,GAA9B,EAGf;AACHC,IAAAA,SADG,uBACS,CACV;AACD,KAHE;AAKHC,IAAAA,YALG,0BAKY,CACb;AACD,KAPE;AASHC,IAAAA,QATG,oBASMH,IATN,EASY;AACb;AACA,UAAGA,IAAI,CAAC,cAAD,CAAJ,KAAyBN,CAAC,CAAC,WAAD,CAAD,CAAeM,IAAf,CAAoB,cAApB,CAA5B,EAAgE;AAChE,YAAII,OAAO,4GACyDJ,IAAI,CAAC,eAAD,CAD7D,0JAGoBA,IAAI,CAAC,YAAD,CAHxB,6GAIkCA,IAAI,CAAC,WAAD,CAJtC,iNAQ+BA,IAAI,CAAC,SAAD,CARnC,4FAAX;AAYA,YAAIK,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf;AACAF,QAAAA,QAAQ,CAACG,kBAAT,CAA4B,WAA5B,EAAyCJ,OAAzC;AACC;AACF,KA3BE;AA6BHK,IAAAA,KAAK,EAAE,eAASL,OAAT,EAAkBM,YAAlB,EAAgC;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,aAAO,KAAKG,OAAL,CAAa,OAAb,EAAsB;AAACT,QAAAA,OAAO,EAAEA,OAAV;AAAmBM,QAAAA,YAAY,EAAEA;AAAjC,OAAtB,CAAP;AACD;AAjCE,GAHe,CAApB,CADa,CAwCb;;AACEhB,EAAAA,CAAC,CAACY,QAAD,CAAD,CAAYQ,EAAZ,CAAe,OAAf,EAAwB,iBAAxB,EAA2C,YAAU;AACnD,QAAMC,WAAW,GAAGrB,CAAC,CAAC,WAAD,CAAD,CAAeM,IAAf,CAAoB,cAApB,CAApB;AACA,QAAMgB,UAAU,GAAGtB,CAAC,CAAC,gBAAD,CAAD,CAAoBuB,GAApB,EAAnB;AACAtB,IAAAA,WAAW,CAACc,KAAZ,CAAkBO,UAAlB,EAA8BD,WAA9B;AACAT,IAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCW,KAAzC,GAAiD,EAAjD;AACAxB,IAAAA,CAAC,CAAC,gBAAD,CAAD,CAAoByB,KAApB;AACD,GAND;AAOD,CAhDA,CAAD","sourcesContent":["import consumer from \"./consumer\"\n\n$(function() {\nconst chatChannel = consumer.subscriptions.create({\n    channel: \"ProductChannel\",\n    product_id: $('#messages').data('product-id')\n  }, {\n  connected() {\n    // Called when the subscription is ready for use on the server\n  },\n\n  disconnected() {\n    // Called when the subscription has been terminated by the server\n  },\n\n  received(data) {\n    // Called when there's incoming data on the websocket for this channel\n    if(data['message_type'] === $('#messages').data('message-type')){\n    var message = `<div class=\"col-12\">\n                    <div class=\"card text-white bg-success mb-3 float-${data['right_or_left']}\" style=\"max-width: 75%;\">\n                     <div class=\"card-header\" style='max-height: 3rem;'>\n                       <img src=\"${data['user_image']}\" class=\"rounded mr-2\" alt=\"user image\">\n                       <strong class=\"mr-auto\">${data['user_name']}</strong>\n                       <small>less than a minute ago</small>\n                     </div>\n                     <div class=\"card-body\">\n                       <p class=\"card-text\">${data['message']}</p>\n                     </div>\n                    </div>\n                  </div>`;\n    var messages = document.getElementById('messages');\n    messages.insertAdjacentHTML('beforeend', message);\n    }\n  },\n\n  speak: function(message, message_type) {\n    console.log(message);\n    console.log(message_type);\n    return this.perform('speak', {message: message, message_type: message_type});\n  }\n});\n\n//message送信\n  $(document).on('click', '#message_button', function(){\n    const messageType = $('#messages').data('message-type');\n    const messageVal = $('#message_field').val();\n    chatChannel.speak(messageVal, messageType);\n    document.getElementById('message_field').value = '';\n    $('#message_field').focus();\n  });\n});"]},"metadata":{},"sourceType":"module"}